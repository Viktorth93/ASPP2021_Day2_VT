

b)

$ python3.7 rbf.py 
Python:  10.216325521469116
Scipy:  0.3450632095336914

$ kernprof -l -v rbf.py 
Python:  100.3060417175293
Scipy:  0.20745611190795898



Total time: 59.0794 s
File: rbf.py
Function: rbf_network at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def rbf_network(X, beta, theta):
     8                                           
     9         1          7.0      7.0      0.0      N = X.shape[0]
    10         1          4.0      4.0      0.0      D = X.shape[1]
    11         1         11.0     11.0      0.0      Y = np.zeros(N)
    12                                           
    13      1001       2858.0      2.9      0.0      for i in range(N):
    14   1001000    3051558.0      3.0      5.2          for j in range(N):
    15   1000000    2905301.0      2.9      4.9              r = 0
    16   6000000   18380310.0      3.1     31.1              for d in range(D):
    17   5000000   24838473.0      5.0     42.0                  r += (X[j, d] - X[i, d]) ** 2
    18   1000000    3609780.0      3.6      6.1              r = r**0.5
    19   1000000    6291077.0      6.3     10.6              Y[i] += beta[j] * exp(-(r * theta)**2)
    20                                           
    21         1          3.0      3.0      0.0      return Y

Total time: 0.207393 s
File: rbf.py
Function: rbf_scipy at line 24

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    24                                           @profile
    25                                           def rbf_scipy(X, beta):
    26                                           
    27         1          5.0      5.0      0.0      N = X.shape[0]
    28         1          4.0      4.0      0.0      D = X.shape[1]    
    29         1     166867.0 166867.0     80.5      rbf = Rbf(X[:,0], X[:,1], X[:,2], X[:,3], X[:, 4], beta)
    30                                               #Xtuple = tuple([X[:, i] for i in range(D)])
    31         1         30.0     30.0      0.0      Xtuple = tuple([X[:, i] for i in range(D)])
    32                                           
    33         1      40487.0  40487.0     19.5      return rbf(*Xtuple)

So the line-by-line profiling of kernprof makes the python codes much slower, but keeps the scipy execution time about the same.

c) Clearly, according to the kernprof output above, most of the time in vanilla python is consumed by the nested loops over the dataset that are used to perform the interpolation. Scipy's interpolation function performs this work much faster.

d)
